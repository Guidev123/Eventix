// <auto-generated />
using System;
using Eventix.Modules.Attendance.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Eventix.Modules.Attendance.Infrastructure.Database.Migrations
{
    [DbContext(typeof(AttendanceDbContext))]
    [Migration("20250710211038_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("attendance")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Eventix.Modules.Attendance.Domain.Attendees.Entities.Attendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Attendees", "attendance");
                });

            modelBuilder.Entity("Eventix.Modules.Attendance.Domain.Events.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Events", "attendance");
                });

            modelBuilder.Entity("Eventix.Modules.Attendance.Domain.Events.Models.DuplicateCheckInTicket", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("EventId", "Code");

                    b.HasIndex("Code");

                    b.ToTable("DuplicateCheckInTickets", "attendance");
                });

            modelBuilder.Entity("Eventix.Modules.Attendance.Domain.Events.Models.EventStatistic", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttendeesCheckedIn")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(256)");

                    b.Property<DateTime?>("EndsAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartsAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketsSold")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(80)");

                    b.HasKey("EventId");

                    b.ToTable("EventStatistics", "attendance");
                });

            modelBuilder.Entity("Eventix.Modules.Attendance.Domain.Events.Models.InvalidCheckInTicket", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("EventId", "Code");

                    b.HasIndex("Code");

                    b.ToTable("InvalidCheckInTickets", "attendance");
                });

            modelBuilder.Entity("Eventix.Modules.Attendance.Domain.Tickets.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttendeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UsedAtUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AttendeeId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("EventId");

                    b.ToTable("Tickets", "attendance");
                });

            modelBuilder.Entity("Eventix.Shared.Infrastructure.Inbox.Models.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("VARCHAR(3000)");

                    b.Property<string>("Error")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.HasKey("Id");

                    b.ToTable("InboxMessages", "attendance");
                });

            modelBuilder.Entity("Eventix.Shared.Infrastructure.Inbox.Models.InboxMessageConsumer", b =>
                {
                    b.Property<Guid>("InboxMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(256)");

                    b.HasKey("InboxMessageId", "Name");

                    b.ToTable("InboxMessageConsumers", "attendance");
                });

            modelBuilder.Entity("Eventix.Shared.Infrastructure.Outbox.Models.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("VARCHAR(3000)");

                    b.Property<string>("Error")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages", "attendance");
                });

            modelBuilder.Entity("Eventix.Shared.Infrastructure.Outbox.Models.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("OutboxMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(256)");

                    b.HasKey("OutboxMessageId", "Name");

                    b.ToTable("OutboxMessageConsumers", "attendance");
                });

            modelBuilder.Entity("Eventix.Modules.Attendance.Domain.Attendees.Entities.Attendee", b =>
                {
                    b.OwnsOne("Eventix.Shared.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("AttendeeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("VARCHAR(160)")
                                .HasColumnName("Email");

                            b1.HasKey("AttendeeId");

                            b1.HasIndex("Address")
                                .IsUnique();

                            b1.ToTable("Attendees", "attendance");

                            b1.WithOwner()
                                .HasForeignKey("AttendeeId");
                        });

                    b.OwnsOne("Eventix.Shared.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("AttendeeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("VARCHAR(50)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("VARCHAR(50)")
                                .HasColumnName("LastName");

                            b1.HasKey("AttendeeId");

                            b1.ToTable("Attendees", "attendance");

                            b1.WithOwner()
                                .HasForeignKey("AttendeeId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Eventix.Modules.Attendance.Domain.Events.Entities.Event", b =>
                {
                    b.OwnsOne("Eventix.Shared.Domain.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AdditionalInfo")
                                .IsRequired()
                                .HasColumnType("VARCHAR(250)")
                                .HasColumnName("AdditionalInfo");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("VARCHAR(100)")
                                .HasColumnName("City");

                            b1.Property<string>("Neighborhood")
                                .IsRequired()
                                .HasColumnType("VARCHAR(100)")
                                .HasColumnName("Neighborhood");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("VARCHAR(50)")
                                .HasColumnName("Number");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("VARCHAR(50)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("VARCHAR(200)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("VARCHAR(20)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("EventId");

                            b1.ToTable("Events", "attendance");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.OwnsOne("Eventix.Modules.Attendance.Domain.Events.ValueObjects.EventSpecification", "Specification", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("VARCHAR(256)")
                                .HasColumnName("Description");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("VARCHAR(80)")
                                .HasColumnName("Title");

                            b1.HasKey("EventId");

                            b1.ToTable("Events", "attendance");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.OwnsOne("Eventix.Shared.Domain.ValueObjects.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("EndsAtUtc")
                                .HasColumnType("datetime2")
                                .HasColumnName("EndsAtUtc");

                            b1.Property<DateTime>("StartsAtUtc")
                                .HasColumnType("datetime2")
                                .HasColumnName("StartsAtUtc");

                            b1.HasKey("EventId");

                            b1.ToTable("Events", "attendance");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.Navigation("DateRange")
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Specification")
                        .IsRequired();
                });

            modelBuilder.Entity("Eventix.Modules.Attendance.Domain.Events.Models.DuplicateCheckInTicket", b =>
                {
                    b.HasOne("Eventix.Modules.Attendance.Domain.Events.Models.EventStatistic", null)
                        .WithMany("DuplicateCheckInTickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Eventix.Modules.Attendance.Domain.Events.Models.EventStatistic", b =>
                {
                    b.OwnsOne("Eventix.Shared.Domain.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("EventStatisticEventId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AdditionalInfo")
                                .IsRequired()
                                .HasColumnType("VARCHAR(250)")
                                .HasColumnName("AdditionalInfo");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("VARCHAR(100)")
                                .HasColumnName("City");

                            b1.Property<string>("Neighborhood")
                                .IsRequired()
                                .HasColumnType("VARCHAR(100)")
                                .HasColumnName("Neighborhood");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("VARCHAR(50)")
                                .HasColumnName("Number");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("VARCHAR(50)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("VARCHAR(200)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("VARCHAR(20)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("EventStatisticEventId");

                            b1.ToTable("EventStatistics", "attendance");

                            b1.WithOwner()
                                .HasForeignKey("EventStatisticEventId");
                        });

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Eventix.Modules.Attendance.Domain.Events.Models.InvalidCheckInTicket", b =>
                {
                    b.HasOne("Eventix.Modules.Attendance.Domain.Events.Models.EventStatistic", null)
                        .WithMany("InvalidCheckInTickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Eventix.Modules.Attendance.Domain.Tickets.Entities.Ticket", b =>
                {
                    b.HasOne("Eventix.Modules.Attendance.Domain.Attendees.Entities.Attendee", null)
                        .WithMany()
                        .HasForeignKey("AttendeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Eventix.Modules.Attendance.Domain.Events.Entities.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Eventix.Modules.Attendance.Domain.Events.Models.EventStatistic", b =>
                {
                    b.Navigation("DuplicateCheckInTickets");

                    b.Navigation("InvalidCheckInTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
